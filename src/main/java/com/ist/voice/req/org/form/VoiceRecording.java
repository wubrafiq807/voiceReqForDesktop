/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ist.voice.req.org.form;

import com.ist.voice.req.org.model.ButtonEditor;
import com.ist.voice.req.org.model.LoginModel;
import com.ist.voice.req.org.model.RecognitionListModel;
import com.ist.voice.req.org.util.Constant;
import com.ist.voice.req.org.util.Function;
import java.awt.Color;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.enterprise.inject.Default;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import com.ist.voice.req.org.model.ButtonRenderer;
import com.ist.voice.req.org.model.ButtonViewEditor;
import com.ist.voice.req.org.model.ButtonViewRenderer;
import com.ist.voice.req.org.model.RecognitionCreationModel;
import com.ist.voice.req.org.model.RecognitionResult;
import com.ist.voice.req.org.model.RecognitionViewModel;
import static com.ist.voice.req.org.util.Constant.REQ_LIST_DELETE_TEXT;
import static com.ist.voice.req.org.util.Constant.REQ_LIST_VIEW_TEXT;
import static com.ist.voice.req.org.util.Constant.VOICE_RECORDING_FILE_STORAGE;
import com.ist.voice.req.org.util.CustomAudioPlayer;
import com.ist.voice.req.org.util.FileOrder;
import edu.umd.cs.findbugs.config.CommandLine;
import static java.awt.Component.CENTER_ALIGNMENT;
import java.awt.EventQueue;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.Date;
import javax.swing.BorderFactory;
import javax.swing.JCheckBox;
import javax.swing.JTable;
import javax.swing.border.EtchedBorder;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author mhc
 */
public class VoiceRecording extends javax.swing.JFrame implements Constant {

    Function siteFunction = new Function();
    ArrayList<FileOrder> list;
    private boolean isStopPlayer=false;
    CustomAudioPlayer customAudioPlayer;
    String recordStartTime=null,recordEndTime=null,audioFileName=null;   

    /**
     * Creates new form UserProfile
     */
    public VoiceRecording() throws IOException {

        if (!siteFunction.isLogin()) {
            gotoLoginpage();
        }
        siteFunction.updatedRecordingFlag(START_RECORDING);

        initComponents();
        recordinglabel.setIcon(new javax.swing.ImageIcon("src/images/pass.png")); // NOI18N
        startRecordingButton.setIcon(new javax.swing.ImageIcon("src/images/start-req.jpg")); // NOI18N
        StopRecordingBtn.setIcon(new javax.swing.ImageIcon("src/images/stop.png")); // NOI18N
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(239, 198, 46));
        headerRenderer.setHorizontalAlignment((int) CENTER_ALIGNMENT);

        for (int i = 0; i < jTable1.getModel().getColumnCount(); i++) {
            jTable1.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        updateREcordingListtable();
        DefaultTableCellRenderer rendar = new DefaultTableCellRenderer();
        rendar.setOpaque(true);
        rendar.setHorizontalAlignment((int) jTable1.CENTER_ALIGNMENT);
        rendar.setBackground(new Color(70, 168, 155));
        rendar.setBorder(BorderFactory.createBevelBorder(EtchedBorder.RAISED));
        jTable1.getColumnModel().getColumn(0).setCellRenderer(rendar);
        jTable1.setRowHeight(30);

    }

    public void addRowToJTable(List<FileOrder> list) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        TableColumnModel columnModel = jTable1.getColumnModel();
        columnModel.getColumn(0).setResizable(false);
        columnModel.getColumn(0).setPreferredWidth(20);
        Object rowData[] = new Object[1];
        for (FileOrder file : list) {
            rowData[0] = siteFunction.convertTime(file.getUpdationDate());
            model.addRow(rowData);
        }
        model.fireTableDataChanged();
    }

// added rows from arraylist to jtable
    private void gotoLoginpage() {

        dispose();
        Login login = new Login();
        login.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDatePickerUtil1 = new net.sourceforge.jdatepicker.util.JDatePickerUtil();
        jPanel1 = new javax.swing.JPanel();
        recordinglabel = new javax.swing.JLabel();
        startRecordingButton = new javax.swing.JButton();
        StopRecordingBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        leftSideMenu = new javax.swing.JMenu();
        menuRecord = new javax.swing.JMenuItem();
        menuItemRecognitionList = new javax.swing.JMenuItem();
        menu_profile = new javax.swing.JMenuItem();
        menu_user_signOut = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RECOGNIZED LIST VIEW");
        setResizable(false);

        recordinglabel.setIcon(new javax.swing.ImageIcon("C:\\Users\\mhc\\Desktop\\doc\\pass.png")); // NOI18N

        startRecordingButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\mhc\\Desktop\\doc\\start-req.jpg")); // NOI18N
        startRecordingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startRecordingButtonActionPerformed(evt);
            }
        });

        StopRecordingBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\mhc\\Desktop\\doc\\stop.png")); // NOI18N
        StopRecordingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopRecordingBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(startRecordingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73)
                .addComponent(StopRecordingBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(276, 276, 276))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(recordinglabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(recordinglabel, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(StopRecordingBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(startRecordingButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Recording List"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        leftSideMenu.setText("Menu");

        menuRecord.setText("Record");
        menuRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRecordActionPerformed(evt);
            }
        });
        leftSideMenu.add(menuRecord);

        menuItemRecognitionList.setText("Recognition List");
        menuItemRecognitionList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRecognitionListActionPerformed(evt);
            }
        });
        leftSideMenu.add(menuItemRecognitionList);

        menu_profile.setText("Profile");
        menu_profile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_profileActionPerformed(evt);
            }
        });
        leftSideMenu.add(menu_profile);

        menu_user_signOut.setText("Signout");
        menu_user_signOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_user_signOutActionPerformed(evt);
            }
        });
        leftSideMenu.add(menu_user_signOut);

        jMenuBar1.add(leftSideMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemRecognitionListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRecognitionListActionPerformed
        // TODO add your handling code here:
        dispose();
        try {
            new RecognitionList().setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(UserProfile.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuItemRecognitionListActionPerformed

    private void menu_user_signOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_user_signOutActionPerformed
        // TODO add your handling code here:
        siteFunction.unsetLoginData();
        gotoLoginpage();

    }//GEN-LAST:event_menu_user_signOutActionPerformed

    private void menu_profileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_profileActionPerformed
        dispose();
        try {
            new UserProfile().setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(VoiceRecording.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menu_profileActionPerformed
    private void updateStartIconButton() {
         recordinglabel.setIcon(new javax.swing.ImageIcon("src/images/sound_wave.gif")); // NOI18N
    }
    private void startRecordingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startRecordingButtonActionPerformed
        try {
            recordStartTime=siteFunction.getCurrentTime();
            siteFunction.updatedRecordingFlag(START_RECORDING);
            isStopPlayer=false;
            // TODO add your handling code here:
           updateStartIconButton();
            siteFunction.confirmDirectory(VOICE_RECORDING_FILE_STORAGE);
            audioFileName=siteFunction.getUUID() + ".wav";
            Process p = new ProcessBuilder(PYTHON_PATH, ABSOLUTE_PATH + "\\record.py", VOICE_RECORDING_FILE_STORAGE + "\\" + audioFileName, VOICE_RECORDING_FILE_NAME).start();
        } catch (IOException ex) {
            Logger.getLogger(VoiceRecording.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_startRecordingButtonActionPerformed

    private void StopRecordingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopRecordingBtnActionPerformed
        recordinglabel.setIcon(new javax.swing.ImageIcon("src/images/pass.png")); // NOI18N
        if(isStopPlayer){
        customAudioPlayer.stopAudio();        
        }else{
            try {
                updateREcordingListtable();
                siteFunction.updatedRecordingFlag(STOP_RECORDING);
                recordEndTime=siteFunction.getCurrentTime();
                Thread.sleep(5000);
                if(audioFileName!=null){
                    RecognitionCreationModel recognitionCreationModel=siteFunction.createRecognition(audioFileName, recordStartTime, recordEndTime);
                    siteFunction.showAlertMessage(recognitionCreationModel.getMessage());
                }
                
            } catch (IOException ex) {
                Logger.getLogger(VoiceRecording.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(VoiceRecording.class.getName()).log(Level.SEVERE, null, ex);
            }
        }     

        

    }//GEN-LAST:event_StopRecordingBtnActionPerformed
    private void updateREcordingListtable() {
        list = (ArrayList<FileOrder>) siteFunction.getFileFromDirectory(VOICE_RECORDING_FILE_STORAGE);
        addRowToJTable(list);
    }
    private void menuRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRecordActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            dispose();
            new VoiceRecording().setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(RecognitionList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuRecordActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        JTable source = (JTable) evt.getSource();
        int row = source.rowAtPoint(evt.getPoint());
        int action = siteFunction.confirDeleteORPlay();
        actionPerformOnRowClick(action, row);
    }//GEN-LAST:event_jTable1MouseClicked
    private void actionPerformOnRowClick(int action, int row) {
        switch (action) {
            case RECORD_DELETE_FILE:
                siteFunction.deleteFile(VOICE_RECORDING_FILE_STORAGE + "\\" + list.get(row).getFileName());
                updateREcordingListtable();
                break;
            case RECORD_PLAY_FILE:
                updateStartIconButton();
                customAudioPlayer = new CustomAudioPlayer(VOICE_RECORDING_FILE_STORAGE + "\\" + list.get(row).getFileName());
                customAudioPlayer.startAudio();
                isStopPlayer=true;
                break;

        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VoiceRecording.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VoiceRecording.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VoiceRecording.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VoiceRecording.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new VoiceRecording().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(VoiceRecording.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton StopRecordingBtn;
    private net.sourceforge.jdatepicker.util.JDatePickerUtil jDatePickerUtil1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JMenu leftSideMenu;
    private javax.swing.JMenuItem menuItemRecognitionList;
    private javax.swing.JMenuItem menuRecord;
    private javax.swing.JMenuItem menu_profile;
    private javax.swing.JMenuItem menu_user_signOut;
    private javax.swing.JLabel recordinglabel;
    private javax.swing.JButton startRecordingButton;
    // End of variables declaration//GEN-END:variables
}
